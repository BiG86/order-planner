package it.snorcini.dev.orderplanner.dto;

import it.snorcini.dev.orderplanner.error.OrderPlannerValidationErrors;
import it.snorcini.dev.orderplanner.validation.PatternConstraint;
import it.snorcini.dev.orderplanner.validation.PatternConstraintValidator;
import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.springframework.validation.annotation.Validated;

import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

/**
 * DTO used for creation of a Book.
 * <p>
 * Methods:
 * - constructor
 * - getter and setter
 * - equals
 * are auto-generated by Lombok.
 * <p>
 * This class @extends {@link AbstractBaseDTO} to beautify toString method.
 */
@Getter
@Setter
@EqualsAndHashCode(callSuper = true)
@AllArgsConstructor
@NoArgsConstructor
@Validated
public class OrderDTO extends AbstractBaseDTO {

    @Valid
    @NotNull(message = OrderPlannerValidationErrors.ISBN_NULL)
    @PatternConstraint(fieldType = PatternConstraintValidator.PatternConstraintFieldEnum.ISBN,
            message = "orderplanner.be.isbn.format.wrong")
    @Size(max = 255)
    protected String isbn;

    @Valid
    @NotNull(message = OrderPlannerValidationErrors.TITLE_NULL)
    @PatternConstraint(fieldType = PatternConstraintValidator.PatternConstraintFieldEnum.TITLE,
            message = "orderplanner.be.title.format.wrong")
    @Size(max = 255)
    protected String title;

    @Valid
    @NotNull(message = OrderPlannerValidationErrors.AUTHOR_NULL)
    @PatternConstraint(fieldType = PatternConstraintValidator.PatternConstraintFieldEnum.AUTHOR,
            message = "orderplanner.be.author.format.wrong")
    @Size(max = 255)
    protected String author;

    /**
     * ToString method.
     *
     * @return a string item representation
     */
    @Override
    public String toString() {
        return new StringBuilder()
                .append("BookDTO {\n")
                .append("    isbn: ").append(toIndentedString(isbn)).append('\n')
                .append("    title: ").append(toIndentedString(title)).append('\n')
                .append("    author: ").append(toIndentedString(author)).append('\n')
                .append('}').toString();
    }
}
